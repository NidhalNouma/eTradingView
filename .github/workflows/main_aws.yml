name: Build and Deploy Django App to AWS

on:
  push:
    branches: [main]

env:
  AWS_ACCOUNT_ID: 358776226602 # Set your AWS account ID
  AWS_REGION: us-east-1 # Set your AWS region here
  ECR_REPOSITORY: isalgo_test # Set your ECR repository name here
  ECS_CLUSTER: isalgo_test_ecs_cluster # Set your ECS cluster name here
  ECS_SERVICE: isalgo_test_ecs_service # Set your ECS service name here
  ECS_TASK_DEFINITION_NAME: isalgo # Set your ECS task definition name here
  ECS_TASK_DEFINITION_JSON: ecs-task-definition-test.json # Set your ECS task definition json file
  SECURITY_GROUP_ID: sg-01a796680d6ae48b2 # Set your security group ID
  SUBNET_IDS: subnet-0d5644469efcf2370, subnet-060b993da7b594b67, subnet-07fbf55b284399e2d, subnet-07a3aa633664275a4
  TARGET_GROUP_ARN: arn:aws:elasticloadbalancing:us-east-1:358776226602:targetgroup/ecsTargetgroupToIsalgo/3585c2c62d13d859
  CONTAINER_NAME: django-isalgo
  CONTAINER_PORT: 8000

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          if [ -d "/usr/local/aws-cli/v2/current" ]; then
            echo "Updating existing AWS CLI installation."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -o awscliv2.zip
            sudo ./aws/install --update
          else
            echo "Installing AWS CLI."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_REGION }}

      - name: Create ECR Repository if it doesn't exist
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }}; then
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}
          fi

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and Push to ECR
        run: |
          IMAGE_TAG=latest
          ECR_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          docker build \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --build-arg EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER }}" \
            --build-arg EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}" \
            --build-arg STRIPE_API_KEY="${{ secrets.STRIPE_API_KEY }}" \
            --build-arg STRIPE_API_PUBLIC_KEY="${{ secrets.STRIPE_API_PUBLIC_KEY }}" \
            --build-arg STRIPE_PRICE_MN_ID="${{ secrets.STRIPE_PRICE_MN_ID }}" \
            --build-arg STRIPE_PRICE_3MN_ID="${{ secrets.STRIPE_PRICE_3MN_ID }}" \
            --build-arg STRIPE_PRICE_Y_ID="${{ secrets.STRIPE_PRICE_Y_ID }}" \
            --build-arg STRIPE_PRICE_LT_ID="${{ secrets.STRIPE_PRICE_LT_ID }}" \
            --build-arg STRIPE_PRICE_MN_PRICE="${{ secrets.STRIPE_PRICE_MN_PRICE }}" \
            --build-arg STRIPE_PRICE_3MN_PRICE="${{ secrets.STRIPE_PRICE_3MN_PRICE }}" \
            --build-arg STRIPE_PRICE_Y_PRICE="${{ secrets.STRIPE_PRICE_Y_PRICE }}" \
            --build-arg STRIPE_PRICE_LT_PRICE="${{ secrets.STRIPE_PRICE_LT_PRICE }}" \
            --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
            --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
            --build-arg DATABASE_USER="${{ secrets.DATABASE_USER }}" \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_STORAGE_BUCKET_NAME="${{ secrets.AWS_STORAGE_BUCKET_NAME }}" \
            --build-arg TV_SESSION_ID="${{ secrets.TV_SESSION_ID }}" \
            -t $ECR_URI:$IMAGE_TAG .
          docker tag $ECR_URI:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG

      - name: Create ECS Cluster if it doesn't exist
        run: |
          if ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }}; then
            aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}
          fi

      - name: Register ECS Task Definition
        run: |
          aws ecs register-task-definition --cli-input-json file://${{ env.ECS_TASK_DEFINITION_JSON }}

      - name: Create or Update ECS Service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} | jq -r '.services[] | select(.serviceName == "${{ env.ECS_SERVICE }}") | .status')
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "Creating ECS Service: ${{ env.ECS_SERVICE }}"
            aws ecs create-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --task-definition ${{ env.ECS_TASK_DEFINITION_NAME }} \
              --desired-count 1 \
              --launch-type "FARGATE" \
              --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_IDS }}],securityGroups=[${{ env.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=${{ env.TARGET_GROUP_ARN }},containerName=${{ env.CONTAINER_NAME }},containerPort=${{ env.CONTAINER_PORT }}"
          else
            echo "Updating ECS Service: ${{ env.ECS_SERVICE }}"
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_SERVICE }} \
              --task-definition ${{ env.ECS_TASK_DEFINITION_NAME }}
          fi
