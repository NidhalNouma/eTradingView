name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main_lambda # Adjust this to your branch

env:
  AWS_ACCOUNT_ID: 358776226602 # Set your AWS account ID
  ECR_REPOSITORY: isalgo # Set your ECR repository name here
  AWS_REGION: us-east-1 # Set your AWS region here
  FUNCTION_NAME: isalgo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/arm64

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR Repository if it doesn't exist
        run: |
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }}; then
            aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}
          fi

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build, tag, and push image to Amazon ECR
        run: |
          IMAGE_TAG=latest
          ECR_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          docker build \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --build-arg EMAIL_HOST_USER="${{ secrets.EMAIL_HOST_USER }}" \
            --build-arg EMAIL_HOST_PASSWORD="${{ secrets.EMAIL_HOST_PASSWORD }}" \
            --build-arg STRIPE_API_KEY="${{ secrets.STRIPE_API_KEY }}" \
            --build-arg STRIPE_API_PUBLIC_KEY="${{ secrets.STRIPE_API_PUBLIC_KEY }}" \
            --build-arg STRIPE_PRICE_MN_ID="${{ secrets.STRIPE_PRICE_MN_ID }}" \
            --build-arg STRIPE_PRICE_3MN_ID="${{ secrets.STRIPE_PRICE_3MN_ID }}" \
            --build-arg STRIPE_PRICE_Y_ID="${{ secrets.STRIPE_PRICE_Y_ID }}" \
            --build-arg STRIPE_PRICE_LT_ID="${{ secrets.STRIPE_PRICE_LT_ID }}" \
            --build-arg STRIPE_PRICE_MN_PRICE="${{ secrets.STRIPE_PRICE_MN_PRICE }}" \
            --build-arg STRIPE_PRICE_3MN_PRICE="${{ secrets.STRIPE_PRICE_3MN_PRICE }}" \
            --build-arg STRIPE_PRICE_Y_PRICE="${{ secrets.STRIPE_PRICE_Y_PRICE }}" \
            --build-arg STRIPE_PRICE_LT_PRICE="${{ secrets.STRIPE_PRICE_LT_PRICE }}" \
            --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
            --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
            --build-arg DATABASE_USER="${{ secrets.DATABASE_USER }}" \
            --build-arg DATABASE_PASS="${{ secrets.DATABASE_PASS }}" \
            --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --build-arg AWS_STORAGE_BUCKET_NAME="${{ secrets.AWS_STORAGE_BUCKET_NAME }}" \
            --build-arg TV_SESSION_ID="${{ secrets.TV_SESSION_ID }}" \
            --build-arg COUPON_CODE="${{ secrets.COUPON_CODE }}" \
            --build-arg COUPON_OFF="${{ secrets.COUPON_OFF }}" \
            --platform linux/arm64 \
            -t $ECR_URI:$IMAGE_TAG .

          docker tag $ECR_URI:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG

      - name: Deploy to AWS Lambda
        run: |
          IMAGE_TAG=latest
          ECR_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
          aws lambda update-function-code --function-name ${{ env.FUNCTION_NAME }} --image-uri $ECR_URI:$IMAGE_TAG
